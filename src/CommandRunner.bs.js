// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Robot = require("./Robot.bs.js");
var Table = require("./Table.bs.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Simulation = require("./Simulation.bs.js");

function executeCommand(simulation, command) {
  var match = command.split(" ");
  if (simulation !== undefined && match.length === 1) {
    var match$1 = match[0];
    switch (match$1) {
      case "LEFT" :
          return [
                  Simulation.turnLeft(simulation),
                  undefined
                ];
      case "MOVE" :
          return [
                  Simulation.move(simulation),
                  undefined
                ];
      case "REPORT" :
          return [
                  simulation,
                  Simulation.report(simulation)
                ];
      case "RIGHT" :
          return [
                  Simulation.turnRight(simulation),
                  undefined
                ];
      default:
        return [
                simulation,
                undefined
              ];
    }
  }
  if (match.length !== 2) {
    return [
            simulation,
            undefined
          ];
  }
  var match$2 = match[0];
  if (match$2 !== "PLACE") {
    return [
            simulation,
            undefined
          ];
  }
  var coords = match[1];
  var match$3 = coords.split(",");
  if (match$3.length !== 3) {
    return [
            undefined,
            undefined
          ];
  }
  var east = match$3[0];
  var north = match$3[1];
  var facing = match$3[2];
  var match$4 = Belt_Int.fromString(east);
  var match$5 = Belt_Int.fromString(north);
  var match$6 = Robot.parseFacing(facing);
  if (match$4 === undefined) {
    return [
            undefined,
            undefined
          ];
  }
  if (match$5 === undefined) {
    return [
            undefined,
            undefined
          ];
  }
  if (match$6 === undefined) {
    return [
            undefined,
            undefined
          ];
  }
  var simulation$1 = Simulation.place(Table.make(undefined, undefined, undefined), match$5, match$4, match$6);
  if (simulation$1.TAG === /* Ok */0) {
    return [
            simulation$1._0,
            undefined
          ];
  } else {
    return [
            undefined,
            undefined
          ];
  }
}

function run(commands) {
  var _simulation;
  var _commandList = Belt_List.fromArray(commands);
  var _output = [];
  while(true) {
    var output = _output;
    var commandList = _commandList;
    var simulation = _simulation;
    if (!commandList) {
      return output;
    }
    var tail = commandList.tl;
    var finalCommand = commandList.hd;
    if (tail) {
      var match = executeCommand(simulation, finalCommand);
      var robot = match[1];
      var simulation$1 = match[0];
      if (robot !== undefined) {
        _output = output.concat([robot]);
        _commandList = tail;
        _simulation = simulation$1;
        continue ;
      }
      _commandList = tail;
      _simulation = simulation$1;
      continue ;
    }
    var match$1 = executeCommand(simulation, finalCommand);
    var robot$1 = match$1[1];
    if (robot$1 !== undefined) {
      return output.concat([robot$1]);
    } else {
      return output;
    }
  };
}

exports.run = run;
/* No side effect */
