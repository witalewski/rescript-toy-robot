// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Test = require("rescript-test/src/Test.bs.js");
var Robot = require("../Robot.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");

var eq = Caml_obj.equal;

Test.test("Robot facing north", (function (param) {
        var robot = {
          north: 0,
          east: 0,
          facing: /* North */0
        };
        Test.assertion("moves north", undefined, eq, Robot.move(robot), {
              north: 1,
              east: 0,
              facing: /* North */0
            });
        Test.assertion("moves 2 fields north", undefined, eq, Robot.move(Robot.move(robot)), {
              north: 2,
              east: 0,
              facing: /* North */0
            });
        Test.assertion("turns left to the west", undefined, eq, Robot.turnLeft(robot), {
              north: 0,
              east: 0,
              facing: /* West */1
            });
        Test.assertion("turns right to the east", undefined, eq, Robot.turnRight(robot), {
              north: 0,
              east: 0,
              facing: /* East */3
            });
      }));

Test.test("Robot facing west", (function (param) {
        var robot = {
          north: 0,
          east: 0,
          facing: /* West */1
        };
        Test.assertion("moves west", undefined, eq, Robot.move(robot), {
              north: 0,
              east: -1,
              facing: /* West */1
            });
        Test.assertion("moves 3 fields west", undefined, eq, Robot.move(Robot.move(Robot.move(robot))), {
              north: 0,
              east: -3,
              facing: /* West */1
            });
        Test.assertion("turns left to the south", undefined, eq, Robot.turnLeft(robot), {
              north: 0,
              east: 0,
              facing: /* South */2
            });
        Test.assertion("turns right to the north", undefined, eq, Robot.turnRight(robot), {
              north: 0,
              east: 0,
              facing: /* North */0
            });
        Test.assertion("turns right, then right again to the east", undefined, eq, Robot.turnRight(Robot.turnRight(robot)), {
              north: 0,
              east: 0,
              facing: /* East */3
            });
      }));

Test.test("Robot facing south", (function (param) {
        var robot = {
          north: 0,
          east: 0,
          facing: /* South */2
        };
        Test.assertion("moves south", undefined, eq, Robot.move(robot), {
              north: -1,
              east: 0,
              facing: /* South */2
            });
        Test.assertion("turns left to the east", undefined, eq, Robot.turnLeft(robot), {
              north: 0,
              east: 0,
              facing: /* East */3
            });
        Test.assertion("turns right to the west", undefined, eq, Robot.turnRight(robot), {
              north: 0,
              east: 0,
              facing: /* West */1
            });
        Test.assertion("turns left, then right back to the south", undefined, eq, Robot.turnRight(Robot.turnLeft(robot)), {
              north: 0,
              east: 0,
              facing: /* South */2
            });
      }));

Test.test("Robot facing east", (function (param) {
        var robot = {
          north: 0,
          east: 0,
          facing: /* East */3
        };
        Test.assertion("moves east", undefined, eq, Robot.move(robot), {
              north: 0,
              east: 1,
              facing: /* East */3
            });
        Test.assertion("turns left to the north", undefined, eq, Robot.turnLeft(robot), {
              north: 0,
              east: 0,
              facing: /* North */0
            });
        Test.assertion("turns right to the south", undefined, eq, Robot.turnRight(robot), {
              north: 0,
              east: 0,
              facing: /* South */2
            });
        Test.assertion("turns right to the south, then moves", undefined, eq, Robot.move(Robot.turnRight(robot)), {
              north: -1,
              east: 0,
              facing: /* South */2
            });
      }));

exports.eq = eq;
/*  Not a pure module */
