// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Test = require("rescript-test/src/Test.bs.js");
var Table = require("../Table.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Simulation = require("../Simulation.bs.js");

var eq = Caml_obj.equal;

Test.test("Simulation places a robot", (function (param) {
        var table = Table.make(5, 3, undefined);
        Test.assertion("returns ok of simulation if placement is valid", undefined, eq, Simulation.place(table, 2, 1, /* North */0), {
              TAG: /* Ok */0,
              _0: {
                robot: {
                  north: 2,
                  east: 1,
                  facing: /* North */0
                },
                table: table
              }
            });
        Test.assertion("returns error if placement isn't valid", undefined, eq, Simulation.place(table, 2, 5, /* North */0), {
              TAG: /* Error */1,
              _0: "Placement outside bounds"
            });
      }));

Test.test("Simulation moves a robot and reports", (function (param) {
        var table = Table.make(4, 4, undefined);
        var simulation_robot = {
          north: 0,
          east: 0,
          facing: /* North */0
        };
        var simulation = {
          robot: simulation_robot,
          table: table
        };
        Test.assertion("robot follows a set of commands successfully", undefined, eq, Simulation.report(Simulation.turnRight(Simulation.move(Simulation.move(Simulation.move(Simulation.move(Simulation.move(Simulation.move(Simulation.move(Simulation.move(Simulation.turnLeft(Simulation.move(Simulation.move(Simulation.turnRight(simulation)))))))))))))), {
              north: 4,
              east: 2,
              facing: /* East */3
            });
        Test.assertion("robot follows all commands except those that would make it fall", undefined, eq, Simulation.report(Simulation.move(Simulation.turnLeft(Simulation.move(Simulation.turnLeft(Simulation.move(Simulation.move(Simulation.move(simulation)))))))), {
              north: 2,
              east: 0,
              facing: /* South */2
            });
        Test.assertion("robot makes a small loop", undefined, eq, Simulation.report(Simulation.turnRight(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.turnRight(Simulation.move(simulation))))))))), {
              north: 0,
              east: 0,
              facing: /* North */0
            });
        Test.assertion("robot makes a larger loop", undefined, eq, Simulation.report(Simulation.turnRight(Simulation.move(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.move(simulation))))))))))))), {
              north: 0,
              east: 0,
              facing: /* North */0
            });
        Test.assertion("robot zigzags to the opposite corner", undefined, eq, Simulation.report(Simulation.turnLeft(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.turnLeft(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.turnLeft(Simulation.move(Simulation.turnRight(Simulation.move(Simulation.turnLeft(Simulation.move(Simulation.turnRight(Simulation.move(simulation))))))))))))))))), {
              north: 4,
              east: 4,
              facing: /* North */0
            });
      }));

exports.eq = eq;
/*  Not a pure module */
